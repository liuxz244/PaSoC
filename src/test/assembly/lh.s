_start:
    # ---------- 块1：正数测试（地址 0x10）----------
    li a0, 0x10             # 设置数据存放地址为 0x10
    li t0, 0x12345678       # 定义 32 位正数：高16位 = 0x1234, 低16位 = 0x5678
    sw t0, 0(a0)            # 将数据写入地址 0x10

    # 测试 LH 指令：读取低半字（0x5678），正数扩展后仍为 0x00005678
    lh t1, 0(a0)
    li t2, 0x00005678       # 期望值：0x00005678
    bne t1, t2, fail        # 不匹配则跳转到 fail

    # 测试 LH 指令：读取高半字（0x1234），扩展后为 0x00001234
    lh t1, 2(a0)
    li t2, 0x00001234       # 期望值：0x00001234
    bne t1, t2, fail

    # 测试 LHU 指令（无符号扩展）：读取低半字
    lhu t1, 0(a0)
    li t2, 0x00005678       # 0x5678零扩展后仍为 0x00005678
    bne t1, t2, fail

    # 测试 LHU 指令：读取高半字
    lhu t1, 2(a0)
    li t2, 0x00001234       # 0x1234零扩展后仍为 0x00001234
    bne t1, t2, fail

    # ---------- 块2：负数测试（地址 0x20）----------
    li a0, 0x20             # 设置数据存放地址为 0x20
    li t0, 0xABCD9876       # 定义 32 位负数数据：
                            # 高16位 = 0xABCD（负数，符号扩展后应为 0xFFFFABCD）
                            # 低16位  = 0x9876（负数，符号扩展后应为 0xFFFF9876）
    sw t0, 0(a0)

    # 测试 LH 指令：读取低半字，因 0x9876 最高位为1，扩展后应为 0xFFFF9876
    lh t1, 0(a0)
    li t2, 0xFFFF9876       # 期望值：0xFFFF9876
    bne t1, t2, fail

    # 测试 LH 指令：读取高半字，扩展后应为 0xFFFFABCD
    lh t1, 2(a0)
    li t2, 0xFFFFABCD       # 期望值：0xFFFFABCD
    bne t1, t2, fail

    # 测试 LHU 指令：读取低半字，零扩展后为 0x00009876
    lhu t1, 0(a0)
    li t2, 0x00009876       # 期望值：0x00009876
    bne t1, t2, fail

    # 测试 LHU 指令：读取高半字，零扩展后为 0x0000ABCD
    lhu t1, 2(a0)
    li t2, 0x0000ABCD       # 期望值：0x0000ABCD
    bne t1, t2, fail

    # 如果所有测试通过，返回成功（0）
    li a0, 0
    unimp

fail:
    # 测试失败，返回1
    li a0, 1
    unimp
