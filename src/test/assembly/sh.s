_start:
    # 为测试分配 16 个字节的栈空间
    addi    sp, sp, -16

    # ----------------------------
    # 1. 半字（SH）正数测试
    # 用 0x1234 存储，加载后预期均为 0x1234
    li      t1, 0x1234      # t1 = 0x1234
    sh      t1, 0(sp)       # 将半字存入 sp+0
    lh      t2, 0(sp)       # 带符号加载半字到 t2 → 0x1234
    lhu     t3, 0(sp)       # 无符号加载半字到 t3 → 0x1234

    li      t4, 0x1234      # 预期值：0x1234
    bne     t2, t4, error   # 如果 t2 不等于预期则跳转 error
    bne     t3, t4, error   # 如果 t3 不等于预期则跳转 error

    # ----------------------------
    # 2. 半字（SH）负数测试
    # 用 -1 存储，其低 16 位为 0xFFFF；
    # 带符号加载后期望得到 -1，符号扩展后 t2 = 0xFFFFFFFF；
    # 无符号加载应得到 65535
    li      t1, -1          # t1 = -1  (0xFFFFFFFF)
    sh      t1, 2(sp)       # 存入 sp+2（必须为偶地址，符合半字对齐要求）
    lh      t2, 2(sp)       # 加载带符号半字 → 预期 -1
    lhu     t3, 2(sp)       # 加载无符号半字 → 预期 65535

    li      t4, -1
    bne     t2, t4, error   # 检查带符号加载是否为 -1
    li      t4, 65535
    bne     t3, t4, error   # 检查无符号加载是否为 65535

    # ----------------------------
    # 3. 字节（SB）正数测试
    # 用 0x12 存储，加载后预期均为 0x12
    li      t1, 0x12        # t1 = 0x12
    sb      t1, 4(sp)       # 将字节存入 sp+4
    lb      t2, 4(sp)       # 带符号加载字节 → 0x12（正数，符号位为0）
    lbu     t3, 4(sp)       # 无符号加载字节 → 0x12

    li      t4, 0x12
    bne     t2, t4, error   # 检查带符号加载
    bne     t3, t4, error   # 检查无符号加载

    # ----------------------------
    # 4. 字节（SB）负数测试
    # 用 -1 存储，低 8 位为 0xFF；
    # 带符号加载应为 -1， lbu 加载应为 255
    li      t1, -1          # t1 = -1 (0xFFFFFFFF)
    sb      t1, 5(sp)       # 字节存入 sp+5（字节操作无对齐要求）
    lb      t2, 5(sp)       # 带符号加载字节 → 预期 -1（0xFF 扩展为 0xFFFFFFFF）
    lbu     t3, 5(sp)       # 无符号加载字节 → 预期 255

    li      t4, -1
    bne     t2, t4, error   # 检查带符号加载是否为 -1
    li      t4, 255
    bne     t3, t4, error   # 检查无符号加载是否为 255

    # ----------------------------
    # 若全部测试通过，恢复栈指针并退出仿真
    addi    sp, sp, 16      # 恢复栈空间
success:
    unimp                   # 成功结束后退出仿真

error:
    j       error           # 若有检测失败，程序进入无限循环
